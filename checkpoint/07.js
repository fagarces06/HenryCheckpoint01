const { LinkedList } = require("../DS");
// ‚ö†Ô∏è NO MODIFICAR NADA POR ENCIMA DE ESTA L√çNEA ‚ö†Ô∏è
//
//
//
// 7Ô∏è‚É£ ***** EJERCICIO 7 ***** - LINKEDLIST.mapHouses() 7Ô∏è‚É£ 
// 
// Agregar al prototype de LinkedList el m√©todo mapHouses().
// Vas a implementar un m√©todo parecido al map() de array, d√≥nde tendr√°s que modificar todos los valores
// de la lista actual.
// Recibir√°s un par√°metro que podr√° recibir cualquier tipo de dato (pueden ser strings, arrays u objetos).
// EJEMPLOS:
//  Nos env√≠an la siguiente Lista:
//   ("Casa Moderna") ---> ("Casa Moderna") ---> ("Casa Moderna") --->
//
// LinkedList.map("Caba√±a Antigua")
//
// La lista de inmuebles pasar√≠a a tener el siguiente valor:
//
// ("Caba√±a Antigua") ---> ("Caba√±a Antigua") ---> ("Caba√±a Antigua") --->
//
// ‚ö†Ô∏è ATENCI√ìN ‚ö†Ô∏è
// Recordar que debe poder mapearse la lista por cualquier tipo de dato!
// No necesitas retornar una nueva lista, tenes que modificar la actual!
// 
// REQUISITOS:
//  üü¢ Modificar los valores de la lista actual por lo que recibas por par√°metros
//  üü¢ Retornar false si la lista est√° vac√≠a

LinkedList.prototype.mapHouses = function (value) {
  // Tu c√≥digo aqu√≠:
  let actualpos=this.head;
  if(!this.head){
  	return false;
  }
  while(actualpos.next){
  	actualpos.value=value;
  	actualpos=actualpos.next;

  	if(actualpos.next===null){
  		actualpos.value=value;
  	}
  }


}
  var list= new LinkedList;

  list.add('Casa Moderna');
  list.add('Casa loca');
  list.add('Casa troya');
  //console.log(list);
  list.mapHouses('casa de oto√±o')

// ‚ö†Ô∏è NO MODIFICAR NADA POR DEBAJO DE ESTA L√çNEA ‚ö†Ô∏è
module.exports = {
  LinkedList
};